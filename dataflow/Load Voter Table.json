{
	"name": "Load Voter Table",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "RawTableQuery",
						"type": "DatasetReference"
					},
					"name": "wrkRawVoterData"
				},
				{
					"dataset": {
						"referenceName": "tblVoters",
						"type": "DatasetReference"
					},
					"name": "VoterTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "tblVoters",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "NewVoters"
				}
			],
			"scriptLines": [
				"parameters{",
				"     CountyID as integer (2)",
				"}",
				"source(output(",
				"          LASTN as string,",
				"          FIRSTN as string,",
				"          MIDDLEN as string,",
				"          PREFIXN as string,",
				"          SUFFIXN as string,",
				"          CNTYIDNUM as string,",
				"          STNUM as string,",
				"          STDIR as string,",
				"          STNAME as string,",
				"          APT as string,",
				"          CITY as string,",
				"          ZIP as string,",
				"          REGDATE as string,",
				"          BIRTHYEAR as string,",
				"          VOTERUPDT as string,",
				"          VOTERSTAT as string,",
				"          PARTYAFFIL as string,",
				"          LASTVOTE as string,",
				"          PRSID as string,",
				"          Latitude as integer,",
				"          Longitude as integer,",
				"          PHONE as string,",
				"          OEA as integer,",
				"          DTM as timestamp,",
				"          AltPhone as integer,",
				"          RouteID as integer,",
				"          PRECINCT as string,",
				"          PRECINCT_SP as string,",
				"          PRECINCTID as integer,",
				"          SOSIDNUM as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     inputs:['@CountyID' -> ($CountyID)],",
				"     procedureName: 'spS_GetRawVoterDataInput',",
				"     schemaName: 'dbo',",
				"     resultSet: true,",
				"     format: 'procedure') ~> wrkRawVoterData",
				"source(output(",
				"          VOTERID as long,",
				"          LASTN as string,",
				"          FIRSTN as string,",
				"          MIDDLEN as string,",
				"          PREFIXN as string,",
				"          SUFFIXN as string,",
				"          CNTYIDNUM as string,",
				"          STNUM as string,",
				"          STDIR as string,",
				"          STNAME as string,",
				"          APT as string,",
				"          CITY as string,",
				"          ZIP as string,",
				"          REGDATE as string,",
				"          BIRTHYEAR as string,",
				"          VOTERUPDT as string,",
				"          VOTERSTAT as string,",
				"          PARTYAFFIL as string,",
				"          LASTVOTE as string,",
				"          PRSID as string,",
				"          Latitude as decimal(9,6),",
				"          Longitude as decimal(9,6),",
				"          Phone as string,",
				"          OEA as boolean,",
				"          DTM as timestamp,",
				"          AltPhone as string,",
				"          RouteID as integer,",
				"          PRECINCT as integer,",
				"          PRECINCT_SP as integer,",
				"          PRECINCTID as integer,",
				"          SOSIDNUM as string,",
				"          StudentFlag as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> VoterTable",
				"wrkRawVoterData, VoterTable exists(wrkRawVoterData@SOSIDNUM == VoterTable@SOSIDNUM,",
				"     negate:true,",
				"     broadcast: 'auto')~> NewVoters",
				"NewVoters sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          VOTERID as long,",
				"          LASTN as string,",
				"          FIRSTN as string,",
				"          MIDDLEN as string,",
				"          PREFIXN as string,",
				"          SUFFIXN as string,",
				"          CNTYIDNUM as string,",
				"          STNUM as string,",
				"          STDIR as string,",
				"          STNAME as string,",
				"          APT as string,",
				"          CITY as string,",
				"          ZIP as string,",
				"          REGDATE as string,",
				"          BIRTHYEAR as string,",
				"          VOTERUPDT as string,",
				"          VOTERSTAT as string,",
				"          PARTYAFFIL as string,",
				"          LASTVOTE as string,",
				"          PRSID as string,",
				"          Latitude as decimal(9,6),",
				"          Longitude as decimal(9,6),",
				"          Phone as string,",
				"          OEA as boolean,",
				"          DTM as timestamp,",
				"          AltPhone as string,",
				"          RouteID as integer,",
				"          PRECINCT as integer,",
				"          PRECINCT_SP as integer,",
				"          PRECINCTID as integer,",
				"          SOSIDNUM as string,",
				"          StudentFlag as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          LASTN,",
				"          FIRSTN,",
				"          MIDDLEN,",
				"          PREFIXN,",
				"          SUFFIXN,",
				"          CNTYIDNUM,",
				"          STNUM,",
				"          STDIR,",
				"          STNAME,",
				"          APT,",
				"          CITY,",
				"          ZIP,",
				"          REGDATE,",
				"          BIRTHYEAR,",
				"          VOTERUPDT,",
				"          VOTERSTAT,",
				"          PARTYAFFIL,",
				"          LASTVOTE,",
				"          PRSID,",
				"          Latitude,",
				"          Longitude,",
				"          Phone = PHONE,",
				"          OEA,",
				"          DTM,",
				"          AltPhone,",
				"          RouteID,",
				"          PRECINCT,",
				"          PRECINCT_SP,",
				"          PRECINCTID,",
				"          SOSIDNUM",
				"     )) ~> sink1"
			]
		}
	}
}